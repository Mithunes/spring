#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node * next;
};

void insert_begin(int );
void insert_end(int );
void delete_begin();
void delete_end();
void reverse();
void display(struct node *);

struct node * head;
struct node *temp;

void main(){
    int n,data;
    scanf("%d",&n);
    while(n--){
        scanf("%d",&data);
        insert_begin(data);
    }
    reverse();
    display(head);
}

void insert_begin(int data){
    struct node * nn = (struct node *)malloc(sizeof(struct node));
    nn->data=data;
    nn->next=NULL;
    if(head==NULL){
        head=nn;
    }
    else{
        nn->next=head;
        head=nn;
    }
}

void insert_end(int data){
    struct node * nn=(struct node *)malloc(sizeof(struct node));
    nn->data=data;
    nn->next=NULL;
    if(head==NULL){
        head=nn;
        temp=nn;
    }
    else{
        temp->next=nn;
        temp=nn;
    }
}

void delete_begin(){
    struct node * t=head;
    head=head->next;
    free(t);
}

void delete_end(){
    struct node * t=head;
    struct node * p;
    while(t->next!=NULL){
        p=t;
        t=t->next;
    }
    p->next=NULL;
    free(t);
}

void reverse(){
    struct node * cur=head;
    struct node * nxt;
    struct node * prv;
    while(cur!=NULL){
        nxt=cur->next;
        cur->next=prv;
        prv=cur;
        cur=nxt;
    }
    head=prv;
}

void display(struct node * head){
    if(head!=NULL){
        printf("%d ",head->data);
        display(head->next);
    }
}





#include <stdio.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to partition the array and return the pivot index
int partition(int arr[], int low, int high) {
    int pivot = arr[high]; // Choose the rightmost element as the pivot
    int i = (low - 1);     // Index of the smaller element

    for (int j = low; j <= high - 1; j++) {
        // If the current element is smaller than or equal to the pivot
        if (arr[j] <= pivot) {
            i++; // Increment index of the smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return i + 1; // Return the pivot index
}

// Function to perform the Quick Sort algorithm
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high); // Partition the array

        // Sort elements separately before and after the partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: \n");
    printArray(arr, n);

    quickSort(arr, 0, n - 1);

    printf("Sorted array: \n");
    printArray(arr, n);

    return 0;
}